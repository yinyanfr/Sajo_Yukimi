{"version":3,"sources":["YukimiContext.js","YukimiSetting.js","Yukimi.js","App.js","serviceWorker.js","index.js"],"names":["YukimiContext","React","createContext","YukimiSetting","useContext","lang","setLang","font","setFont","fontSize","setFontSize","theme","setTheme","useState","panel","setPanel","changePanel","which","e","changeLang","localStorage","setItem","changeTheme","className","style","backgroundColor","color","onClick","map","i","key","height","Yukimi","chs","cht","active","contentStyle","fontFamily","source","App","setChs","setCht","getItem","useEffect","fetch","then","res","json","catch","err","console","error","document","body","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcfbdb9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst YukimiContext = React.createContext()\r\n\r\nexport default YukimiContext\r\n","import React, { useContext, useState, useCallback } from 'react'\r\nimport YukimiContext from './YukimiContext'\r\n\r\nconst YukimiSetting = () => {\r\n\r\n    const {\r\n        lang, setLang,\r\n        font, setFont,\r\n        fontSize, setFontSize,\r\n        theme, setTheme\r\n    } = useContext(YukimiContext)\r\n\r\n    const [panel, setPanel] = useState(null)\r\n\r\n    const changePanel = which => e => {\r\n        if (panel === which) {\r\n            setPanel(null)\r\n        }\r\n        else {\r\n            setPanel(which)\r\n        }\r\n    }\r\n\r\n    const changeLang = which => e => {\r\n        setLang(which)\r\n        localStorage.setItem(\"lang\", which)\r\n    }\r\n\r\n    const changeFont = which => e => {\r\n        setFont(which)\r\n        localStorage.setItem(\"font\", which)\r\n    }\r\n\r\n    const changeFontSize = which => e => {\r\n        setFontSize(which)\r\n        localStorage.setItem(\"fontSize\", which)\r\n    }\r\n\r\n    const changeTheme = which => e => {\r\n        setTheme(which)\r\n        localStorage.setItem(\"theme\", which)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"yukimi-setting-wrapper\"\r\n            style={{\r\n                backgroundColor: (theme === \"normal\" ? \"white\" : \"black\"),\r\n                color: (theme === \"normal\" ? \"black\" : \"white\")\r\n            }}\r\n        >\r\n            <div className=\"yukimi-setting\">\r\n                <span onClick={changePanel(\"lang\")}>\r\n                    <i className=\"fas fa-language\"></i>\r\n                </span>\r\n                <span>\r\n                    <i className=\"fas fa-font\" onClick={changePanel(\"font\")}></i>\r\n                </span>\r\n                <span>\r\n                    <i className=\"fas fa-palette\" onClick={changePanel(\"palette\")}></i>\r\n                </span>\r\n            </div>\r\n\r\n            {\r\n                panel\r\n                    ? (\r\n                        <div className=\"yukimi-panel\">\r\n                            <div className=\"field\">\r\n                                {\r\n                                    panel === \"lang\"\r\n                                        ? (\r\n                                            <>\r\n                                                <label className=\"label\">\r\n                                                    {lang === \"chs\" ? \"语言\" : \"語言\"}\r\n                                                </label>\r\n                                                <div className=\"control\">\r\n                                                    <div className=\"yukimi-buttons\">\r\n                                                        <button className={\r\n                                                            lang === \"chs\"\r\n                                                                ? \"button is-link\"\r\n                                                                : \"button is-link is-light\"\r\n                                                        }\r\n                                                            onClick={changeLang(\"chs\")}\r\n                                                        >\r\n                                                            简体中文\r\n                                                        </button>\r\n\r\n                                                        <button className={\r\n                                                            lang === \"cht\"\r\n                                                                ? \"button is-link\"\r\n                                                                : \"button is-link is-light\"\r\n                                                        }\r\n                                                            onClick={changeLang(\"cht\")}\r\n                                                        >\r\n                                                            繁體中文\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <p className=\"help\">简繁转换由谷歌翻译提供</p>\r\n                                            </>\r\n                                        )\r\n                                        : \"\"\r\n                                }\r\n\r\n                                {\r\n                                    panel === \"font\"\r\n                                        ? (\r\n                                            <>\r\n\r\n                                                <label className=\"label\">\r\n                                                    {lang === \"chs\" ? \"字号\" : \"字號\"}\r\n                                                </label>\r\n                                                <div className=\"control\">\r\n                                                    <div className=\"yukimi-buttons\">\r\n                                                        {\r\n                                                            [\"100%\", \"125%\", \"150%\", \"175%\", \"200%\"]\r\n                                                                .map((e, i) => (\r\n                                                                    <span\r\n                                                                        key={i}\r\n                                                                        className={\r\n                                                                            fontSize === e\r\n                                                                                ? \"button is-link\"\r\n                                                                                : \"button is-link is-light\"\r\n                                                                        }\r\n                                                                        onClick={changeFontSize(e)}\r\n                                                                    >\r\n                                                                        <i\r\n                                                                            className=\"fas fa-font\"\r\n                                                                            style={{ fontSize: e }}\r\n                                                                        ></i>\r\n                                                                    </span>\r\n                                                                ))\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <label className=\"label\">\r\n                                                    {lang === \"chs\" ? \"字体\" : \"字體\"}\r\n                                                </label>\r\n                                                <div className=\"control\">\r\n                                                    <div className=\"yukimi-buttons\">\r\n                                                        {\r\n                                                            [\"default\", \"jhenghei\", \"simsun\", \"simhei\", \"kaiti\"]\r\n                                                                .map((e, i) => (\r\n                                                                    <button\r\n                                                                        key={i}\r\n                                                                        className={\r\n                                                                            font === e\r\n                                                                                ? \"button is-link\"\r\n                                                                                : \"button is-link is-light\"\r\n                                                                        }\r\n                                                                        onClick={changeFont(e)}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            (() => {\r\n                                                                                switch (e) {\r\n                                                                                    case \"default\":\r\n                                                                                        return \"默认\"\r\n                                                                                    case \"simsun\":\r\n                                                                                        return \"宋体\"\r\n                                                                                    case \"simhei\":\r\n                                                                                        return \"黑体\"\r\n                                                                                    case \"jhenghei\":\r\n                                                                                        return \"正黑\"\r\n                                                                                    case \"kaiti\":\r\n                                                                                        return \"楷体\"\r\n                                                                                    default:\r\n                                                                                        return \"默认\"\r\n                                                                                }\r\n                                                                            })()\r\n                                                                        }\r\n                                                                    </button>\r\n                                                                ))\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                                <p className=\"help\">根据设备字体优先级，字体切换可能不会生效</p>\r\n                                            </>\r\n                                        )\r\n                                        : \"\"\r\n                                }\r\n\r\n                                {\r\n                                    panel === \"palette\"\r\n                                        ? (\r\n                                            <>\r\n                                                <label className=\"label\">\r\n                                                    {lang === \"chs\" ? \"颜色主题\" : \"顏色主題\"}\r\n                                                </label>\r\n\r\n                                                <div className=\"yukimi-theme-showcase\">\r\n                                                    <div\r\n                                                        className=\"yukimi-theme yukimi-theme-normal\"\r\n                                                        onClick={changeTheme(\"normal\")}\r\n                                                    >普通模式</div>\r\n                                                    <div\r\n                                                        className=\"yukimi-theme yukimi-theme-night\"\r\n                                                        onClick={changeTheme(\"night\")}\r\n                                                    >夜间模式</div>\r\n                                                </div>\r\n                                            </>\r\n                                        )\r\n                                        : \"\"\r\n                                }\r\n                            </div>\r\n                            <div style={{ height: 10 }}></div>\r\n                        </div>\r\n                    )\r\n                    : \"\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YukimiSetting\r\n","import React, { useContext, useEffect } from 'react'\r\nimport YukimiContext from \"./YukimiContext\"\r\nimport Markdown from \"react-markdown\"\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.css\"\r\nimport \"bulma/bulma.sass\"\r\nimport \"./Yukimi.scss\"\r\nimport YukimiSetting from './YukimiSetting'\r\n\r\nconst Yukimi = () => {\r\n\r\n    const {\r\n        chs, cht, lang,\r\n        font, fontSize,\r\n        theme\r\n    } = useContext(YukimiContext)\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <YukimiSetting active={false} />\r\n            <article\r\n                className=\"yukimi-content\"\r\n                style={(() => {\r\n                    const contentStyle = {}\r\n                    contentStyle.fontSize = fontSize\r\n                    if (font !== \"default\") {\r\n                        contentStyle.fontFamily = (() => {\r\n                            switch (font) {\r\n                                case \"simsun\":\r\n                                    return \"SimSun\"\r\n                                case \"simhei\":\r\n                                    return \"SimHei\"\r\n                                case \"jhenghei\":\r\n                                    return \"Microsoft JhengHei\"\r\n                                case \"kaiti\":\r\n                                    return \"KaiTi\"\r\n                                default:\r\n                                    return \"SimHei\"\r\n                            }\r\n                        })()\r\n                    }\r\n                    contentStyle.color = (theme === \"normal\" ? \"black\" : \"white\")\r\n                    return contentStyle\r\n                })()}\r\n            >\r\n\r\n                <Markdown\r\n                    source={lang === \"chs\" ? chs : cht}\r\n                />\r\n\r\n            </article>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Yukimi","import React, {useState, useEffect} from 'react';\nimport Yukimi from './Yukimi';\nimport YukimiContext from './YukimiContext';\n\nconst App = () => {\n\n  const [chs, setChs] = useState(\"\")\n  const [cht, setCht] = useState(\"\")\n  const [lang, setLang] = useState(localStorage.getItem(\"lang\") || \"cht\")\n  const [font, setFont] = useState(localStorage.getItem(\"font\") || \"default\")\n  const [fontSize, setFontSize] = useState(localStorage.getItem(\"fontSize\") || \"100%\")\n  const [theme, setTheme] = useState(localStorage.getItem(\"theme\") || \"normal\")\n\n  useEffect(() => {\n    fetch(\"/content\")\n      .then(res => res.json())\n      .then(({chs, cht}) => {\n        setChs(chs)\n        setCht(cht)\n      })\n      .catch(err => {\n        console.error(err)\n      })\n  }, [])\n\n  useEffect(() => {\n    document.body.style.backgroundColor = (theme === \"normal\" ? \"white\" : \"black\")\n  }, [theme])\n\n  return (\n    <div>\n      <YukimiContext.Provider value={{\n        chs, cht,\n        setChs,\n        setCht,\n        lang, setLang,\n        font, setFont,\n        fontSize, setFontSize,\n        theme, setTheme\n      }}>\n        <Yukimi />\n      </YukimiContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}